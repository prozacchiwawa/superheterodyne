module Arty exposing (..)

import Debug exposing (log)
import EffModel as EF exposing (wrap, unwrap)
import Html exposing (Html)
import Html.Attributes exposing (style)
import Http
import Json.Decode as JD
import RouteUrl exposing (UrlChange)
import RouteUrl.Builder as Builder exposing (Builder, builder, replacePath)
import Navigation exposing (Location)
import Task

type Viewing
    = Home
    | Code
    | Writing

type alias Model =
    { viewing : Viewing
    , mediumEntries : List FeedEntry
    }

type alias FeedEntry =
    { title : String
    , link : String
    , published : String }

type alias Feed =
    { entries : List FeedEntry }

type Action
    = NoOp
    | Switch Viewing
    | HttpError Http.Error
    | GotMedium Feed

(:=) : String -> JD.Decoder a -> JD.Decoder a
(:=) = JD.field

feedDecoder : JD.Decoder Feed
feedDecoder =
    (JD.at ["entries"] (JD.list feedEntryDecoder) |> JD.andThen (\entries -> JD.succeed { entries = entries }))

feedEntryDecoder : JD.Decoder FeedEntry
feedEntryDecoder =
    JD.map3 FeedEntry
        ("title" := JD.string)
        ("link" := JD.string)
        ("date" := JD.string)

init flags =
    let model =
        { viewing = Home
        , mediumEntries = flags
        }
    in
    (model,
         if model.mediumEntries == [] then
             Http.get "medium-feed" feedDecoder |> Http.toTask
             |> Task.map GotMedium
             |> Task.onError (\e -> Task.succeed (HttpError e))
             |> Task.perform identity
         else
             Cmd.none
    )

effModelUpdate : Action -> EF.EffModel Model Action -> EF.EffModel Model Action
effModelUpdate action effmodel =
    case log "action" action of
        Switch v ->
            effmodel
                |> EF.map (\m -> { m | viewing = v })
        GotMedium feed ->
            effmodel
                |> EF.map (\m -> { m | mediumEntries = feed.entries })
        _ -> effmodel

update : Action -> Model -> (Model, Cmd Action)
update action model =
    model
        |> wrap
        |> effModelUpdate action
        |> unwrap

view : Model -> Html Action
view model =
    let viewHtml =
        let writing =
            List.map
                (\e ->
                     <a href={e.link}>
                         <h3><div class='pencil'></div> {=e.title}</h3>
                         <div class='post-date'>{=e.published}</div>
                     </a>
                ) model.mediumEntries
        in
        let offset =
            case model.viewing of
                Home -> "0"
                Code -> "-100vw"
                Writing -> "-200vw"
        in
        <div class="spa-container" {style [("left", offset)]}>
                <div class="home-body">
                    <h1>Home</h1>
                    <p>An old C++ programmer, a new functional programmer.  A curmudgeon recently tiring of cynicism.</p>
                    <h2 style="margin-top: 2vmin;">Writing</h2>
                    {:writing}
                </div>
                <div class='code-body'>
                    <h1>On The Web</h1>
                    <div class='left-margin github-link'><a href='http://greatpodcasts.net/'>GreatPodcasts.net</a></div>
                    <p>A podcast player with a simple, mobile friendly UI and a radio experience as much as possible.</p>
                    <h1>Code</h1>
                    <div class='left-margin github-link'><a href='https://github.com/prozacchiwawa'><div class='github'></div><div class='code-title'>My Github Page</div></a></div>
                    <p>I'm what might be called a habitual coder.  I'm somewhat prolific, and I tend to write an eclectic mix of stuff depending on my interests at the time.</p>
                    <h2 class='code-h2'>Some highlights</h2>
                    <p>I've been recently working in elm, and getting into the groove of more formal functional programming languages.</p>
                    <p>
                        <div class='github-link'><a href="https://github.com/prozacchiwawa/elm-lightbox"><div class='github'></div><div class='code-title'>elm-lightbox</div></a></div>
                        <div class='project-date'>June 23, 2017</div>
                        <span>A lightbox editor in elm that overlays an image on html to make precise alignment easier.  Pretty happy with how it turned out.</span>
                    </p>
                    <p>
                        <div class='github-link'><a href='https://github.com/prozacchiwawa/elm-react-native-experiment'><div class='github'></div><div class='code-title'>elm-react-native-experiment</div></a></div>
                        <div class='project-date'>June 19, 2016</div>
                        <span>An experiment with elm-native-ui to port to 0.17 and remove the need for native js in the module.  It turned out well.</span>
                    </p>
                    <p>
                        <div class='github-link'><a href='https://github.com/prozacchiwawa/clang-tooling-style'><div class='github'></div><div class='code-title'>clang-tooling-style</div></a>
                        <div class='project-date'>May 26, 2015</div>
                        <p> In another life I wrote a lot of C++ and refactored large unruly code.  I came up with this:</p>
                        <p>A style enforcer for a very disciplined flavor of C++ requiring the use of interfaces and dependency injection.</p>
                    </p>
                    <p>
                        <div class='github-link'><a href='http://www.reactos.org/'><div class='code-title'>ReactOS</div></a></div>
                        <div class='project-date'>2004-2010</div>
                        <span>Back in the day, I wrote a lot of code in ReactOS, including most of the code in afd.sys and tcpip.sys.</span>
                    </p>
                    <p>
                        <div class='github-link'><a href='http://swig.org/'><div class='code-title'>SWIG</div></a></div>
                        <div class='project-date'>2003</div>
                        <span>In the prehistory of our century, I was interested in language interoperability and wrote a SWIG module for OCaml.</span>
                    </p>
                </div>
                <div class='writing-body'>
                    <h1>Writing</h1>
                    <div class='writing-container'>
                        <h2>Medium</h2>
                        {:writing}
                    </div>
                </div>
            </div>
    in
    let navLi =
        List.map (\t ->
                <li><a href={("#" ++ (toString t))}>{=(toString t)}</a></li>
            ) [Home, Code, Writing]
    in
    <div id='container'>
        <div class='nav'>
            <ul>
                {:navLi}
                <li class='this'><a href="https://github.com/prozacchiwawa/superheterodyne">This Website</a></li>
            </ul>
        </div>
        <div class='heading'>
            <div class='name'>
                <div class='name-center'>Art Yerkes</div>
                <div class='email'>art.yerkes@gmail.com</div>
            </div>
            <div class='color-filter'></div>
            <div class='heading-image'></div>
        </div>
        <div class='body'>
            {viewHtml}
        </div>
    </div>

-- All stolen from the elm router example

-- This is the common code that we rely on above. Again, you don't have to use
-- a `Builder` if you don't want to ... it's just one way to construct a `UrlChange`.
delta2builder : Model -> Model -> Maybe Builder
delta2builder previous current =
    builder
        |> replacePath [toString current.viewing] |> Just

-- This is an example of the new API, if using the whole URL
delta2url : Model -> Model -> Maybe UrlChange
delta2url previous current =
    -- We're using a `Builder` to build up the possible change. You don't
    -- have to do that ... you can construct a `UrlChange` however you like.
    --
    -- So, as the last step, we map our possible `Builder` to a `UrlChange`.
    Maybe.map Builder.toUrlChange <|
        delta2builder previous current

-- An example of the new API, if just using the hash
delta2hash : Model -> Model -> Maybe UrlChange
delta2hash previous current =
    -- Here, we're re-using the Builder-oriented code, but stuffing everything
    -- into the hash (rather than actually using the full URL).
    Maybe.map Builder.toHashChange <|
        delta2builder previous current

-- This is an example of a `location2messages` function ... I'm calling it
-- `hash2messages` to illustrate something that uses just the hash.
hash2messages : Location -> List Action
hash2messages location =
    -- You can parse the `Location` in whatever way you want. I'm making
    -- a `Builder` and working from that, but I'm sure that's not the
    -- best way. There are links to a number of proper parsing packages
    -- in the README.
    builder2messages (Builder.fromHash location.href)

-- Another example of a `location2messages` function, this time only using the hash.
builder2messages : Builder -> List Action
builder2messages builder =
    -- You can parse the `Location` in whatever way you want ... there are a
    -- number of parsing packages listed in the README. Here, I'm constructing
    -- a `Builder` and working from that, but that's probably not the best
    -- thing to do.
    case Builder.path builder of
        first :: rest ->
            let
                subBuilder =
                    Builder.replacePath rest builder
            in
                case first of
                    "Code" -> [Switch Code]
                    "Writing" -> [Switch Writing]
                    _ -> [Switch Home]
        _ -> [Switch Home]
